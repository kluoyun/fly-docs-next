"use strict";(self.webpackChunkklipper_docs=self.webpackChunkklipper_docs||[]).push([[48040],{70202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ProductDoc/ExtensionBoard/fly-kppm/power_resume","title":"Power Failure Resume for Klipper","description":"* Only applicable to certain machines","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/ProductDoc/ExtensionBoard/fly-kppm/power_resume.mdx","sourceDirName":"ProductDoc/ExtensionBoard/fly-kppm","slug":"/ProductDoc/ExtensionBoard/fly-kppm/power_resume","permalink":"/fly-docs-next/en/docs/ProductDoc/ExtensionBoard/fly-kppm/power_resume","draft":false,"unlisted":false,"editUrl":"https://github.com/kluoyun/fly-docs-next/tree/master/docs/ProductDoc/ExtensionBoard/fly-kppm/power_resume.mdx","tags":[],"version":"current","lastUpdatedBy":"XiaoK","lastUpdatedAt":1730539595000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Product Introduction","permalink":"/fly-docs-next/en/docs/ProductDoc/ExtensionBoard/fly-kppm/"},"next":{"title":"FLY-ADXL","permalink":"/fly-docs-next/en/docs/category/fly-adxl"}}');var o=n(86070),i=n(15658);const s={sidebar_position:2},a="Power Failure Resume for Klipper",d={},c=[{value:"Switch Branch",id:"switch-branch",level:2},{value:"Reference Configuration",id:"reference-configuration",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"power-failure-resume-for-klipper",children:"Power Failure Resume for Klipper"})}),"\n",(0,o.jsx)(t.admonition,{title:"Notice",type:"danger",children:(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Only applicable to certain machines"}),"\n"]})}),"\n",(0,o.jsx)(t.h2,{id:"switch-branch",children:"Switch Branch"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"This needs to be executed via SS through a network connection to the host machine after ensuring the host machine can access the internet."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git clone https://e.coding.net/g-ofpa1390/3D-Printers/klipper-dev.git -b fly-dev klipper\n"})}),"\n",(0,o.jsx)(t.h2,{id:"reference-configuration",children:"Reference Configuration"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cfg",children:"[power_resume]\npower_pin: PA10\nis_shutdown: True # Whether to perform a shutdown operation, default is enabled\nstart_gcode:\n\xa0 \xa0 # G-code to execute before resuming printing\n\xa0 \xa0 # All parameters saved before power failure can be retrieved using {PR}\n\xa0 \xa0 # Use M118 {PR} to output all available parameters\n\xa0 \xa0 M118 Resuming Print: {PR.print_stats.filename}\n\xa0 \xa0 {% if PR.print_stats.info.total_layer %}\n\xa0 \xa0 \xa0 \xa0 M118 Total Layers: {PR.print_stats.info.total_layer}\n\xa0 \xa0 \xa0 \xa0 M118 Current Layer: {PR.print_stats.info.current_layer}\n\xa0 \xa0 {% endif %}\n\xa0 \xa0 M118 Interrupt Position: X:[{PR.POS_X}] Y:[{PR.POS_Y}] Z:[{PR.POS_Z}] E:[{PR.POS_E}]\n\xa0 \xa0 M140 S{PR.bed.target} \xa0 \xa0 \xa0; Set bed temperature\n\xa0 \xa0 # M104 S180 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Set extruder temperature\n\xa0 \xa0 # M109 S180 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Wait for extruder to heat up to set temperature\n\xa0 \xa0 G91 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Relative coordinates\n\xa0 \xa0 G1 Z2 F100 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ; Lift Z, prepare for X,Y zeroing\n\xa0 \xa0 G90 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Absolute coordinates\n\xa0 \xa0 G28 X Y \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Home XY\n\xa0 \xa0 M140 S{PR.bed.target} \xa0 \xa0 \xa0; Set bed temperature\n\xa0 \xa0 M104 S{PR.extruder.target} ; Set extruder temperature\n\xa0 \xa0 M190 S{PR.bed.target} \xa0 \xa0 \xa0; Wait for bed to heat up to set temperature\n\xa0 \xa0 M109 S{PR.extruder.target} ; Wait for extruder to heat up to set temperature\n\xa0 \xa0 M106 S255 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Turn on cooling fan\n\xa0 \xa0 M83 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Relative extrusion\n\xa0 \xa0 G1 E10 F400 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Extrude some filament\n\xa0 \xa0 G90 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0; Absolute coordinates\n\xa0 \xa0 G1 F{PR.gcode_move.speed} \xa0; Set movement speed\n\xa0 \xa0 G1 X{PR.POS_X} Y{PR.POS_Y} Z{PR.POS_Z} ; Move to starting position\n\xa0 \xa0 {% if PR.gcode_move.absolute_coordinates %}\n\xa0 \xa0 \xa0 \xa0 G90 ; Absolute movement\n\xa0 \xa0 {% else %}\n\xa0 \xa0 \xa0 \xa0 G91 ; Relative movement\n\xa0 \xa0 {% endif %}\n\xa0 \xa0 {% if PR.gcode_move.absolute_extrude %}\n\xa0 \xa0 \xa0 \xa0 M82 ; Absolute extrusion\n\xa0 \xa0 {% else %}\n\xa0 \xa0 \xa0 \xa0 M83 ; Relative extrusion\n\xa0 \xa0 {% endif %}\n\xa0 \xa0 G92 E{PR.POS_E} ; Set extrusion position\nshutdown_gcode:\n\xa0 \xa0 # G-code to execute before shutting down\n\xa0 \xa0 M118 Low Power Supply Voltage, Shutting Down\n\xa0 \xa0 # M112 ; Emergency stop\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);